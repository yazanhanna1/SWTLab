package dbadapter;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;

import interfaces.IPerformance;

public class DBFacade implements ICustomerAccount {
	private static DBFacade instance;
	
	/**
	 * Constructor which loads the corresponding driver for the chosen database type
	 */
	private DBFacade() {
		try {
			Class.forName("com." + Configuration.getType() + ".jdbc.Driver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Implementation of the Singleton pattern.
	 * 
	 * @return
	 */
	public static DBFacade getInstance() {
		if (instance == null) {
			instance = new DBFacade();
		}

		return instance;
	}
	
	public static void setInstance(DBFacade dbfacade) {
		instance = dbfacade;
	}
	
	public CustomerAccount getCustomerAccount(String email) {
		//CustomerAccount result = new CustomerAccount();

		// Declare the necessary SQL queries.
		String sqlSelect = "SELECT * FROM CustomerAccount WHERE email = ?";

		// Query all offers that fits to the given criteria.
		try (Connection connection = DriverManager
				.getConnection(
						"jdbc:" + Configuration.getType() + "://" + Configuration.getServer() + ":"
								+ Configuration.getPort() + "/" + Configuration.getDatabase(),
						Configuration.getUser(), Configuration.getPassword())) {

			try (PreparedStatement ps = connection.prepareStatement(sqlSelect)) {
				ps.setString(1, email);
				try (ResultSet rs = ps.executeQuery()) {
					while (rs.next()) {
						CustomerAccount temp = new CustomerAccount(rs.getString(1),rs.getString(2));

						// Query all customerAccounts for the offer to check if its
						// available.
						try (ResultSet brs = psSelectB.executeQuery()) {
							ArrayList<Booking> bookings = new ArrayList<Booking>();
							while (brs.next()) {
								bookings.add(new Booking(brs.getInt(1), brs.getTimestamp(2), brs.getTimestamp(3),
										brs.getTimestamp(4), brs.getBoolean(5),
										new GuestData(brs.getString(6), brs.getString(7)), brs.getDouble(8),
										brs.getInt(9)));
							}
							temp.setBookings(bookings);
						}
						if (temp.available(arrivalTime, departureTime))
							result.add(temp);
					}
					;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}


}
